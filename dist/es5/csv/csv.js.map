{"version":3,"sources":["../../../lib/csv/csv.js"],"names":["fs","require","fastCsv","customParseFormat","utc","dayjs","extend","StreamBuf","exists","SpecialValues","true","false","error","CSV","workbook","worksheet","filename","options","Error","stream","createReadStream","read","close","Promise","resolve","reject","addWorksheet","sheetName","dateFormats","map","datum","datumNumber","Number","isNaN","Infinity","dt","reduce","matchingDate","currentDateFormat","dayjsObj","isValid","Date","valueOf","special","undefined","csvStream","parse","parserOptions","on","data","addRow","emit","pipe","getWorksheet","sheetId","format","formatterOptions","dateFormat","dateUTC","value","text","hyperlink","formula","result","JSON","stringify","includeEmptyRows","lastRow","eachRow","row","rowNumber","write","values","shift","end","streamOptions","encoding","createWriteStream","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst fastCsv = require('fast-csv');\nconst customParseFormat = require('dayjs/plugin/customParseFormat');\nconst utc = require('dayjs/plugin/utc');\nconst dayjs = require('dayjs')\n  .extend(customParseFormat)\n  .extend(utc);\nconst StreamBuf = require('../utils/stream-buf');\n\nconst {\n  fs: {exists},\n} = require('../utils/utils');\n\n/* eslint-disable quote-props */\nconst SpecialValues = {\n  true: true,\n  false: false,\n  '#N/A': {error: '#N/A'},\n  '#REF!': {error: '#REF!'},\n  '#NAME?': {error: '#NAME?'},\n  '#DIV/0!': {error: '#DIV/0!'},\n  '#NULL!': {error: '#NULL!'},\n  '#VALUE!': {error: '#VALUE!'},\n  '#NUM!': {error: '#NUM!'},\n};\n/* eslint-ensable quote-props */\n\nclass CSV {\n  constructor(workbook) {\n    this.workbook = workbook;\n    this.worksheet = null;\n  }\n\n  async readFile(filename, options) {\n    options = options || {};\n    if (!(await exists(filename))) {\n      throw new Error(`File not found: ${filename}`);\n    }\n    const stream = fs.createReadStream(filename);\n    const worksheet = await this.read(stream, options);\n    stream.close();\n    return worksheet;\n  }\n\n  read(stream, options) {\n    options = options || {};\n\n    return new Promise((resolve, reject) => {\n      const worksheet = this.workbook.addWorksheet(options.sheetName);\n\n      const dateFormats = options.dateFormats || ['YYYY-MM-DD[T]HH:mm:ssZ', 'YYYY-MM-DD[T]HH:mm:ss', 'MM-DD-YYYY', 'YYYY-MM-DD'];\n      const map =\n        options.map ||\n        function(datum) {\n          if (datum === '') {\n            return null;\n          }\n          const datumNumber = Number(datum);\n          if (!Number.isNaN(datumNumber) && datumNumber !== Infinity) {\n            return datumNumber;\n          }\n          const dt = dateFormats.reduce((matchingDate, currentDateFormat) => {\n            if (matchingDate) {\n              return matchingDate;\n            }\n            const dayjsObj = dayjs(datum, currentDateFormat, true);\n            if (dayjsObj.isValid()) {\n              return dayjsObj;\n            }\n            return null;\n          }, null);\n          if (dt) {\n            return new Date(dt.valueOf());\n          }\n          const special = SpecialValues[datum];\n          if (special !== undefined) {\n            return special;\n          }\n          return datum;\n        };\n\n      const csvStream = fastCsv\n        .parse(options.parserOptions)\n        .on('data', data => {\n          worksheet.addRow(data.map(map));\n        })\n        .on('end', () => {\n          csvStream.emit('worksheet', worksheet);\n        });\n\n      csvStream.on('worksheet', resolve).on('error', reject);\n\n      stream.pipe(csvStream);\n    });\n  }\n\n  /**\n   * @deprecated since version 4.0. You should use `CSV#read` instead. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md\n   */\n  createInputStream() {\n    throw new Error(\n      '`CSV#createInputStream` is deprecated. You should use `CSV#read` instead. This method will be removed in version 5.0. Please follow upgrade instruction: https://github.com/exceljs/exceljs/blob/master/UPGRADE-4.0.md'\n    );\n  }\n\n  write(stream, options) {\n    return new Promise((resolve, reject) => {\n      options = options || {};\n      // const encoding = options.encoding || 'utf8';\n      // const separator = options.separator || ',';\n      // const quoteChar = options.quoteChar || '\\'';\n\n      const worksheet = this.workbook.getWorksheet(options.sheetName || options.sheetId);\n\n      const csvStream = fastCsv.format(options.formatterOptions);\n      stream.on('finish', () => {\n        resolve();\n      });\n      csvStream.on('error', reject);\n      csvStream.pipe(stream);\n\n      const {dateFormat, dateUTC} = options;\n      const map =\n        options.map ||\n        (value => {\n          if (value) {\n            if (value.text || value.hyperlink) {\n              return value.hyperlink || value.text || '';\n            }\n            if (value.formula || value.result) {\n              return value.result || '';\n            }\n            if (value instanceof Date) {\n              if (dateFormat) {\n                return dateUTC ? dayjs.utc(value).format(dateFormat) : dayjs(value).format(dateFormat);\n              }\n              return dateUTC ? dayjs.utc(value).format() : dayjs(value).format();\n            }\n            if (value.error) {\n              return value.error;\n            }\n            if (typeof value === 'object') {\n              return JSON.stringify(value);\n            }\n          }\n          return value;\n        });\n\n      const includeEmptyRows = options.includeEmptyRows === undefined || options.includeEmptyRows;\n      let lastRow = 1;\n      if (worksheet) {\n        worksheet.eachRow((row, rowNumber) => {\n          if (includeEmptyRows) {\n            while (lastRow++ < rowNumber - 1) {\n              csvStream.write([]);\n            }\n          }\n          const {values} = row;\n          values.shift();\n          csvStream.write(values.map(map));\n          lastRow = rowNumber;\n        });\n      }\n      csvStream.end();\n    });\n  }\n\n  writeFile(filename, options) {\n    options = options || {};\n\n    const streamOptions = {\n      encoding: options.encoding || 'utf8',\n    };\n    const stream = fs.createWriteStream(filename, streamOptions);\n\n    return this.write(stream, options);\n  }\n\n  async writeBuffer(options) {\n    const stream = new StreamBuf();\n    await this.write(stream, options);\n    return stream.read();\n  }\n}\n\nmodule.exports = CSV;\n"],"file":"csv.js"}