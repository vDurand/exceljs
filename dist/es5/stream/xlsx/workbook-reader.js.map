{"version":3,"sources":["../../../../lib/stream/xlsx/workbook-reader.js"],"names":["fs","require","EventEmitter","PassThrough","Readable","nodeStream","unzip","tmp","iterateStream","parseSax","StyleManager","WorkbookPropertiesManager","WorksheetReader","HyperlinkReader","setGracefulCleanup","WorkbookReader","input","options","worksheets","sharedStrings","hyperlinks","styles","entries","init","properties","createReadStream","Error","parse","eventType","value","emit","read","Symbol","asyncIterator","stream","_getStream","zip","Parse","forceStream","pipe","waitingWorkSheets","entry","match","sheetNo","path","_parseWorkbook","_parseSharedStrings","_parseStyles","_parseWorksheet","Promise","resolve","reject","file","err","fd","tempFileCleanupCallback","push","tempStream","createWriteStream","on","_parseHyperlinks","autodrain","fileStream","payload","_emitEntry","type","parseStream","inT","text","index","events","node","name","iterator","id","worksheetReader","workbook","hyperlinksReader","Options","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst {EventEmitter} = require('events');\nconst {PassThrough, Readable} = require('readable-stream');\nconst nodeStream = require('stream');\nconst unzip = require('unzipper');\nconst tmp = require('tmp');\nconst iterateStream = require('../../utils/iterate-stream');\nconst parseSax = require('../../utils/parse-sax');\n\nconst StyleManager = require('../../xlsx/xform/style/styles-xform');\nconst WorkbookPropertiesManager = require('../../xlsx/xform/book/workbook-properties-xform');\n\nconst WorksheetReader = require('./worksheet-reader');\nconst HyperlinkReader = require('./hyperlink-reader');\n\ntmp.setGracefulCleanup();\n\nclass WorkbookReader extends EventEmitter {\n  constructor(input, options = {}) {\n    super();\n\n    this.input = input;\n\n    this.options = {\n      worksheets: 'emit',\n      sharedStrings: 'cache',\n      hyperlinks: 'ignore',\n      styles: 'ignore',\n      entries: 'ignore',\n      ...options,\n    };\n\n    this.styles = new StyleManager();\n    this.styles.init();\n\n    this.properties = new WorkbookPropertiesManager();\n  }\n\n  _getStream(input) {\n    if (input instanceof nodeStream.Readable || input instanceof Readable) {\n      return input;\n    }\n    if (typeof input === 'string') {\n      return fs.createReadStream(input);\n    }\n    throw new Error(`Could not recognise input: ${input}`);\n  }\n\n  async read(input, options) {\n    try {\n      for await (const {eventType, value} of this.parse(input, options)) {\n        switch (eventType) {\n          case 'shared-strings':\n            this.emit(eventType, value);\n            break;\n          case 'worksheet':\n            this.emit(eventType, value);\n            await value.read();\n            break;\n          case 'hyperlinks':\n            this.emit(eventType, value);\n            break;\n        }\n      }\n      this.emit('end');\n      this.emit('finished');\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  async *[Symbol.asyncIterator]() {\n    for await (const {eventType, value} of this.parse()) {\n      if (eventType === 'worksheet') {\n        yield value;\n      }\n    }\n  }\n\n  async *parse(input, options) {\n    if (options) this.options = options;\n    const stream = (this.stream = this._getStream(input || this.input));\n    const zip = unzip.Parse({forceStream: true});\n    stream.pipe(zip);\n\n    // worksheets, deferred for parsing after shared strings reading\n    const waitingWorkSheets = [];\n\n    for await (const entry of iterateStream(zip)) {\n      let match;\n      let sheetNo;\n      switch (entry.path) {\n        case '_rels/.rels':\n        case 'xl/_rels/workbook.xml.rels':\n          break;\n        case 'xl/workbook.xml':\n          await this._parseWorkbook(entry);\n          break;\n        case 'xl/sharedStrings.xml':\n          yield* this._parseSharedStrings(entry);\n          break;\n        case 'xl/styles.xml':\n          await this._parseStyles(entry);\n          break;\n        default:\n          if (entry.path.match(/xl\\/worksheets\\/sheet\\d+[.]xml/)) {\n            match = entry.path.match(/xl\\/worksheets\\/sheet(\\d+)[.]xml/);\n            sheetNo = match[1];\n            if (this.sharedStrings) {\n              yield* this._parseWorksheet(iterateStream(entry), sheetNo);\n            } else {\n              // create temp file for each worksheet\n              await new Promise((resolve, reject) => {\n                tmp.file((err, path, fd, tempFileCleanupCallback) => {\n                  if (err) {\n                    return reject(err);\n                  }\n                  waitingWorkSheets.push({sheetNo, path, tempFileCleanupCallback});\n\n                  const tempStream = fs.createWriteStream(path);\n                  entry.pipe(tempStream);\n                  return tempStream.on('finish', () => {\n                    return resolve();\n                  });\n                });\n              });\n            }\n          } else if (entry.path.match(/xl\\/worksheets\\/_rels\\/sheet\\d+[.]xml.rels/)) {\n            match = entry.path.match(/xl\\/worksheets\\/_rels\\/sheet(\\d+)[.]xml.rels/);\n            sheetNo = match[1];\n            yield* this._parseHyperlinks(iterateStream(entry), sheetNo);\n          }\n          break;\n      }\n      entry.autodrain();\n    }\n\n    for (const {sheetNo, path, tempFileCleanupCallback} of waitingWorkSheets) {\n      let fileStream = fs.createReadStream(path);\n      // TODO: Remove once node v8 is deprecated\n      // Detect and upgrade old fileStreams\n      if (!fileStream[Symbol.asyncIterator]) {\n        fileStream = fileStream.pipe(new PassThrough());\n      }\n      yield* this._parseWorksheet(fileStream, sheetNo);\n      tempFileCleanupCallback();\n    }\n  }\n\n  _emitEntry(payload) {\n    if (this.options.entries === 'emit') {\n      this.emit('entry', payload);\n    }\n  }\n\n  async _parseWorkbook(entry) {\n    this._emitEntry({type: 'workbook'});\n    await this.properties.parseStream(iterateStream(entry));\n  }\n\n  async *_parseSharedStrings(entry) {\n    this._emitEntry({type: 'shared-strings'});\n    switch (this.options.sharedStrings) {\n      case 'cache':\n        this.sharedStrings = [];\n        break;\n      case 'emit':\n        break;\n      default:\n        return;\n    }\n\n    let inT = false;\n    let text = null;\n    let index = 0;\n    for await (const events of parseSax(iterateStream(entry))) {\n      for (const {eventType, value} of events) {\n        if (eventType === 'opentag') {\n          const node = value;\n          if (node.name === 't') {\n            text = null;\n            inT = true;\n          }\n        } else if (eventType === 'text') {\n          text = text ? text + value : value;\n        } else if (eventType === 'closetag') {\n          const node = value;\n          if (inT && node.name === 't') {\n            if (this.options.sharedStrings === 'cache') {\n              this.sharedStrings.push(text);\n            } else if (this.options.sharedStrings === 'emit') {\n              yield {index: index++, text};\n            }\n            text = null;\n          }\n        }\n      }\n    }\n  }\n\n  async _parseStyles(entry) {\n    this._emitEntry({type: 'styles'});\n    if (this.options.styles === 'cache') {\n      this.styles = new StyleManager();\n      await this.styles.parseStream(iterateStream(entry));\n    }\n  }\n\n  *_parseWorksheet(iterator, sheetNo) {\n    this._emitEntry({type: 'worksheet', id: sheetNo});\n    const worksheetReader = new WorksheetReader({workbook: this, id: sheetNo, iterator, options: this.options});\n    if (this.options.worksheets === 'emit') {\n      yield {eventType: 'worksheet', value: worksheetReader};\n    }\n  }\n\n  *_parseHyperlinks(iterator, sheetNo) {\n    this._emitEntry({type: 'hyperlinks', id: sheetNo});\n    const hyperlinksReader = new HyperlinkReader({workbook: this, id: sheetNo, iterator, options: this.options});\n    if (this.options.hyperlinks === 'emit') {\n      yield {eventType: 'hyperlinks', value: hyperlinksReader};\n    }\n  }\n}\n\n// for reference - these are the valid values for options\nWorkbookReader.Options = {\n  worksheets: ['emit', 'ignore'],\n  sharedStrings: ['cache', 'emit', 'ignore'],\n  hyperlinks: ['cache', 'emit', 'ignore'],\n  styles: ['cache', 'ignore'],\n  entries: ['emit', 'ignore'],\n};\n\nmodule.exports = WorkbookReader;\n"],"file":"workbook-reader.js"}